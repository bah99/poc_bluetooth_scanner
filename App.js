import React, { Component } from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  Text,
  StatusBar
} from 'react-native';
import { BleManager } from 'react-native-ble-plx';
import { requestLocationPermission } from './Permissions'
import GetLocation from 'react-native-get-location'
import AsyncStorage from '@react-native-community/async-storage';

export default class App extends Component {
  constructor() {
    super();
    this.manager = new BleManager();
    this.id = 'asddjhd14f6d5f'; // the 16 bytes token generated by @julien
    this.devices = []; // will containt the scanned devices depending the distance
    // console.log(this.manager)
  }


  connectToDevice(device) {
    this.manager.connectToDevice(device.id)
      .then(d => console.log(device.discoverAllServicesAndCharacteristics()))
      .then(d => this.getServicesAndCharacteristics(d));
  }

  // logging all characteristics
  getServicesAndCharacteristics(device) {
    let characteristics = [];

    // first, get all the services advertised by the device
    device.services()
      .then(services => {

        const characteristics = [];

        // second, get the characteristics for each service
        services.forEach((service, i) => {

          service.characteristics()
            .then(c => {

              characteristics.push(c);

              if (i === services.length - 1) {

                /**
                 *  Here we log an array of arrays so you can cherrypick UUID's
                 *  as well as info on how they can be used.
                 *  
                 *  You should figure out which characteristics you need, 
                 *  and grab the serviceUUID and characteristicUUID, saving them
                 *  as constants to use later when reading/writing/monitoring.
                 * 
                 *  Once you have constants set up, you can scrap this and 
                 *  just use the device or BleManager after connecting.  
                 */

                console.log(characteristics);

              }

            })

        })

      })
  }

  // store the data to the device storage (we will synchronize to server frequently!!!)
  storeData = async (value) => {
    try {
      const jsonValue = JSON.stringify(value)
      console.log("App -> storeData -> jsonValue", jsonValue)
      await AsyncStorage.setItem('@scanned_devices', jsonValue)
      // alert('Data saved successfully');
    } catch (e) {
      // saving error
      alert('Failed to save the data to storage')
    }
  }

  // get the saved data from the device storage
  getData = async () => {
    try {
      const storedDevices = await AsyncStorage.getItem('@scanned_devices');
      console.log("App -> getData -> storedDevices", JSON.parse(storedDevices))
      if (storedDevices !== null) {
        // value previously stored
        this.devices = JSON.parse(storedDevices);
      }
    } catch (e) {
      // error reading value
      alert('Failed to fetch the data from storage')
    }
  }

  // help us to calculate the approximative distance depending txPower & rssi
  calculateDistance(rssi) {

    const txPower = -59; // hard coded power value, Usually ranges between -59 to -65;

    if (rssi == 0) {
      return -1.0; // if we cannot determine distance, return -1.
    }

    const ratio = rssi * 1.0 / txPower;
    // console.log("App -> calculateDistance -> ratio", ratio)
    if (ratio < 1.0) {
      return Math.pow(ratio, 10);
    }
    else {
      const distance = (0.89976) * Math.pow(ratio, 7.7095) + 0.111;
      // console.log("App -> calculateDistance -> accuracy", distance)
      return distance;
    }

  }

  locateDevice = async () => {
    const location = await GetLocation.getCurrentPosition({
      enableHighAccuracy: true,
      timeout: 15000,
    });
    return location;
  }

  scan = async () => {
    this.manager.startDeviceScan(null, { allowDuplicates: false }, (error, device) => {
      if (error) {
        console.error(error);
        // Handle error (scanning will be stopped automatically)
        return;
      }


      if (device.id !== null && !this.devices.some(device => device.deviceId === device.id)) { // check if doesn't exist before adding it
        var distance = this.calculateDistance(device.rssi);
        if (distance < 1.5) { // 1.5 meters with 0.5 meter of marge!            
           const location = this.locateDevice() ?? {}; // locate the nearest device before storing his id
          
           console.log(device.id, distance, '--------Device------');
          this.devices.push({deviceId: device.id, location}); // add to list of devices
          this.storeData(this.devices);
        }
        // this.manager.stopDeviceScan();
        // this.manager.connectToDevice(device.id)
        // .then(d => console.log(d))
        // .catch(err => console.error(err));
        // device.connect()
        //   .then((device) => {
        //     console.log("Discovering services and characteristics")
        //     return device.discoverAllServicesAndCharacteristics()
        //   })
        //   .then((device) => {
        //     console.log("Setting notifications")
        //     // return this.setupNotifications(device)
        //   })
        //   .then(() => {
        //     console.log("Listening...")
        //   }, (error) => {
        //     this.error(error.message)
        //   })
      }
    });
  }


  componentDidMount = async () => {
    this.getData();
    //request location & backgroundLocation
    const locationPermission = requestLocationPermission();

    if (Platform.OS === 'ios') {
      this.manager.onStateChange((state) => {
        if (state === 'PoweredOn') this.scan()
      })
    } else {
      this.scan()
    }
    // const backgroundLocationPermission = requestBackgroundLocationPermission();
    console.log(locationPermission, 'permissions')
    if (locationPermission) {
      this.scan();
    }
  }


  render() {
    return (
      <>
        <StatusBar barStyle="light-content" animated="true" />
        <View style={styles.titleContainer}>
          <Text style={styles.title}>Bluetooth Scanner</Text>
        </View>
        <SafeAreaView>
          <ScrollView
            contentInsetAdjustmentBehavior="automatic"
            style={styles.scrollView}>

            {global.HermesInternal == null ? null : (
              <View style={styles.engine}>
                <Text style={styles.footer}>Engine: Hermes</Text>
              </View>
            )}

          </ScrollView>
        </SafeAreaView>
      </>
    );
  }
};

const styles = StyleSheet.create({
  scrollView: {
    // backgroundColor: Colors.lighter,
    width: '100%',
    height: '100%'
  },
  titleContainer: {
    backgroundColor: '#42f5d7',
    height: '11%',
    marginBottom: '5%'
  },
  title: {
    marginTop: '7%',
    color: 'white',
    textAlign: 'center',
    fontSize: 20
  },
  body: {
    // backgroundColor: Colors.white,
  },
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
    // color: Colors.black,
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
    // color: Colors.dark,
  },
  highlight: {
    fontWeight: '700',
  },
  footer: {
    // color: Colors.dark,
    fontSize: 12,
    fontWeight: '600',
    padding: 4,
    paddingRight: 12,
    textAlign: 'right',
  },
});

